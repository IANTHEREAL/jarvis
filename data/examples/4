### An Output Example
```yaml
task: "Provide bullet points for the AI-related stories on the Hacker News front page"
objective: ...
thoughts: ...
hints_from_user:
  - "This is the first task, so there are no previous tasks or outcomes."
  - "The user's original request: Provide bullet points for the top 3 AI-related stories on the Hacker News front page."
start_seq: 1
instructions:
  - seq: 1
    type: WebSearch
    objective: "Search the URLs of the Hacker News"
    args:
      query: "Hacker News front page"
      save_to: "hacker_news_url.seq1.list"
  - seq: 2
      type: TextCompletion
      objective: "Identify the correct Hacker News front page URL"
      args:
        request: "Identify the correct Hacker News front page URL"
        output_format:
          kvs:
            - key: "hacker_news_front_page_url.seq2.str"
              value: "<to_fill>"
        content: "'\n'.join(jvm.get('hacker_news_url.seq1.list'))"
  - seq: 3
    type: FetchWebContent
    objective: "Fetch the content from the Hacker News front page"
    args:
      url: "jvm.get('hacker_news_front_page_url.seq2.str')"
      save_to: "hacker_news_content.seq3.str"
- seq: 4
    type: TextCompletion
    objective: "Extract the stories' URLs from the Hacker News front page content"
    args:
      request: "Extract the stories' URLs from the Hacker News front page content"
      output_format:
        kvs:
          - key: "hacker_news_stories_urls.seq4.list"
            value: "<to_fill>"
    content: "jvm.get('hacker_news_content.seq3.str')"
  - seq: 5
    type: Loop
    objective: "Loop through the stories URLs to fetch the content and generate the bullet points for the AI-related stories"
    args:
      count: "len(jvm.get('hacker_news_stories_urls.seq4.list'))"
      index_key: "idx"
      body:
        - seq: 6
          type: FetchWebContent
          objective: "Fetch the content from the current URL"
          args:
            url: "jvm.get('hacker_news_stories_urls.seq4.list')[idx]"
            save_to: "story_content_{idx}.seq6.str"
        - seq: 7
          type: TextCompletion
          objective: "Decide if the story is relevant to AI"
          args:
            request: "Determine if this story is about AI"
            output_format:
              kvs:
                - key: "is_relevant_{idx}.seq7.bool"
                  value: "<to_fill>"
            content: "jvm.get(f'story_content_{idx}.seq6.str')"
        - seq: 8
          type: If
          objective: "If the story is relevant to AI, generate the bullet points"
          args:
            condition: "jvm.get(f'is_relevant_{idx}.seq7.bool')"
            then:
              - seq: 9
                type: TextCompletion
                objective: "Please generate a list of bullet points for this story for humans to read"
                args:
                  request: "Please generate a list of bullet points for this story for humans to read"
                  output_format:
                    kvs:
                      - key: "story_bullet_points_{idx}.seq9.list"
                        value: "<to_fill>"
                  content: "'AI-related story: ' + jvm.get(f'story_content_{idx}.seq6.str'))"
            else: []
end_seq: 9
overall_outcome: "The bullet points of the AI-related stories on Hacker News have been fetched and generated, it can be retrieved with keys like 'slack_story_bullet_points_message_<idx>.seq9.list'"
```
